.TH "doc/src/acp.h" 3 "Wed Dec 28 2016" "Version 2.1.0" "ACP Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc/src/acp.h \- A header file for ACP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBacp_wsditem\fP"
.br
.ti -1c
.RI "struct \fBacp_element_t\fP"
.br
.ti -1c
.RI "struct \fBacp_pair_t\fP"
.br
.ti -1c
.RI "struct \fBacp_vector_t\fP"
.br
.ti -1c
.RI "struct \fBacp_vector_it_t\fP"
.br
.ti -1c
.RI "struct \fBacp_deque_t\fP"
.br
.ti -1c
.RI "struct \fBacp_deque_it_t\fP"
.br
.ti -1c
.RI "struct \fBacp_list_t\fP"
.br
.ti -1c
.RI "struct \fBacp_list_it_t\fP"
.br
.ti -1c
.RI "struct \fBacp_set_t\fP"
.br
.ti -1c
.RI "struct \fBacp_set_it_t\fP"
.br
.ti -1c
.RI "struct \fBacp_set_ib_t\fP"
.br
.ti -1c
.RI "struct \fBacp_map_t\fP"
.br
.ti -1c
.RI "struct \fBacp_map_it_t\fP"
.br
.ti -1c
.RI "struct \fBacp_map_ib_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBACP_ATKEY_NULL\fP   0LLU"
.br
.ti -1c
.RI "#define \fBACP_GA_NULL\fP   0LLU"
.br
.ti -1c
.RI "#define \fBACP_HANDLE_ALL\fP   0xffffffffffffffffLLU"
.br
.ti -1c
.RI "#define \fBACP_HANDLE_CONT\fP   0xfffffffffffffffeLLU"
.br
.ti -1c
.RI "#define \fBACP_HANDLE_NULL\fP   0x0000000000000000LLU"
.br
.ti -1c
.RI "#define \fBACP_WSD_NULL\fP   (\fBacp_wsd_t\fP)(\-1)"
.br
.RI "typedef int64_t acp_wsd_t; "
.ti -1c
.RI "#define \fBacp_assign\fP(type, \&.\&.\&.)   acp_assign_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_assign_range\fP(type, \&.\&.\&.)   acp_assign_range_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_at\fP(type, \&.\&.\&.)   acp_at_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_back\fP(type, \&.\&.\&.)   acp_back_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_begin\fP(type, \&.\&.\&.)   acp_begin_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_bucket\fP(type, \&.\&.\&.)   acp_bucket_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_bucket_count\fP(type, \&.\&.\&.)   acp_bucket_count_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_bucket_size\fP(type, \&.\&.\&.)   acp_bucket_size_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_capacity\fP(type, \&.\&.\&.)   acp_capacity_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_clear\fP(type, \&.\&.\&.)   acp_clear_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_count\fP(type, \&.\&.\&.)   acp_count_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_create\fP(type, \&.\&.\&.)   acp_create_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_destroy\fP(type, \&.\&.\&.)   acp_destroy_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_empty\fP(type, \&.\&.\&.)   acp_empty_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_end\fP(type, \&.\&.\&.)   acp_end_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_erase\fP(type, \&.\&.\&.)   acp_erase_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_erase_range\fP(type, \&.\&.\&.)   acp_erase_range_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_find\fP(type, \&.\&.\&.)   acp_find_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_front\fP(type, \&.\&.\&.)   acp_front_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_insert\fP(type, \&.\&.\&.)   acp_insert_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_insert_range\fP(type, \&.\&.\&.)   acp_insert_range_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_merge\fP(type, \&.\&.\&.)   acp_merge_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_pop_back\fP(type, \&.\&.\&.)   acp_pop_back_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_pop_front\fP(type, \&.\&.\&.)   acp_pop_front_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_push_back\fP(type, \&.\&.\&.)   acp_push_back_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_push_front\fP(type, \&.\&.\&.)   acp_push_front_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_remove\fP(type, \&.\&.\&.)   acp_remove_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_reserve\fP(type, \&.\&.\&.)   acp_reserve_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_reverse\fP(type, \&.\&.\&.)   acp_reverse_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_size\fP(type, \&.\&.\&.)   acp_size_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_sort\fP(type, \&.\&.\&.)   acp_sort_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_splice\fP(type, \&.\&.\&.)   acp_splice_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_swap\fP(type, \&.\&.\&.)   acp_swap_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_unique\fP(type, \&.\&.\&.)   acp_unique_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_advance\fP(type, \&.\&.\&.)   acp_advance_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_decrement\fP(type, \&.\&.\&.)   acp_decrement_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_dereference\fP(type, \&.\&.\&.)   acp_dereference_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_dereference_value\fP(type, \&.\&.\&.)   acp_dereference_value_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_distance\fP(type, \&.\&.\&.)   acp_distance_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_increment\fP(type, \&.\&.\&.)   acp_increment_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_size\fP(type, \&.\&.\&.)   acp_size_##type(__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBacp_size_value\fP(type, \&.\&.\&.)   acp_size_value_##type(__VA_ARGS__)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint64_t \fBacp_atkey_t\fP"
.br
.ti -1c
.RI "typedef uint64_t \fBacp_ga_t\fP"
.br
.ti -1c
.RI "typedef int64_t \fBacp_handle_t\fP"
.br
.ti -1c
.RI "typedef struct chreqitem * \fBacp_request_t\fP"
.br
.ti -1c
.RI "typedef struct chitem * \fBacp_ch_t\fP"
.br
.ti -1c
.RI "typedef \fBacp_wsditem\fP * \fBacp_wsd_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBacp_init\fP (int *argc, char ***argv)"
.br
.RI "ACP initialization\&. "
.ti -1c
.RI "int \fBacp_finalize\fP (void)"
.br
.RI "ACP finalization\&. "
.ti -1c
.RI "int \fBacp_reset\fP (int rank)"
.br
.RI "ACP Re-initialization\&. "
.ti -1c
.RI "void \fBacp_abort\fP (const char *str)"
.br
.RI "ACP abort\&. "
.ti -1c
.RI "int \fBacp_sync\fP (void)"
.br
.RI "ACP Syncronization\&. "
.ti -1c
.RI "int \fBacp_rank\fP (void)"
.br
.RI "Query for the process rank\&. "
.ti -1c
.RI "int \fBacp_procs\fP (void)"
.br
.RI "Query for the number of processes\&. "
.ti -1c
.RI "\fBacp_ga_t\fP \fBacp_query_starter_ga\fP (int rank)"
.br
.RI "Query for the global address of the starter memory\&. "
.ti -1c
.RI "\fBacp_atkey_t\fP \fBacp_register_memory\fP (void *addr, size_t size, int color)"
.br
.RI "Memory registration\&. "
.ti -1c
.RI "int \fBacp_unregister_memory\fP (\fBacp_atkey_t\fP atkey)"
.br
.RI "Memory unregistration\&. "
.ti -1c
.RI "\fBacp_ga_t\fP \fBacp_query_ga\fP (\fBacp_atkey_t\fP atkey, void *addr)"
.br
.RI "Query for the global address\&. "
.ti -1c
.RI "void * \fBacp_query_address\fP (\fBacp_ga_t\fP ga)"
.br
.RI "Query for the logical address\&. "
.ti -1c
.RI "int \fBacp_query_rank\fP (\fBacp_ga_t\fP ga)"
.br
.RI "Query for the rank of the global address\&. "
.ti -1c
.RI "int \fBacp_query_color\fP (\fBacp_ga_t\fP ga)"
.br
.RI "Query for the color of the global address\&. "
.ti -1c
.RI "int \fBacp_colors\fP (void)"
.br
.RI "Query for the maximum number of colors\&. "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_copy\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, size_t size, \fBacp_handle_t\fP order)"
.br
.RI "Copy\&. "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_cas4\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint32_t oldval, uint32_t newval, \fBacp_handle_t\fP order)"
.br
.RI "4byte Compare and Swap "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_cas8\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint64_t oldval, uint64_t newval, \fBacp_handle_t\fP order)"
.br
.RI "8byte Compare and Swap "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_swap4\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint32_t value, \fBacp_handle_t\fP order)"
.br
.RI "4byte Swap "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_swap8\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint64_t value, \fBacp_handle_t\fP order)"
.br
.RI "8byte Swap "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_add4\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint32_t value, \fBacp_handle_t\fP order)"
.br
.RI "4byte Add "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_add8\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint64_t value, \fBacp_handle_t\fP order)"
.br
.RI "8byte Add "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_xor4\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint32_t value, \fBacp_handle_t\fP order)"
.br
.RI "4byte Exclusive OR "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_xor8\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint64_t value, \fBacp_handle_t\fP order)"
.br
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_or4\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint32_t value, \fBacp_handle_t\fP order)"
.br
.RI "4byte OR "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_or8\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint64_t value, \fBacp_handle_t\fP order)"
.br
.RI "8byte OR "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_and4\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint32_t value, \fBacp_handle_t\fP order)"
.br
.RI "4byte AND "
.ti -1c
.RI "\fBacp_handle_t\fP \fBacp_and8\fP (\fBacp_ga_t\fP dst, \fBacp_ga_t\fP src, uint64_t value, \fBacp_handle_t\fP order)"
.br
.RI "8byte AND "
.ti -1c
.RI "void \fBacp_complete\fP (\fBacp_handle_t\fP handle)"
.br
.RI "Completion of GMA\&. "
.ti -1c
.RI "int \fBacp_inquire\fP (\fBacp_handle_t\fP handle)"
.br
.RI "Query for the completion of GMA\&. "
.ti -1c
.RI "acp_ch_t \fBacp_create_ch\fP (int sender, int receiver)"
.br
.RI "Creates an endpoint of a channel to transfer messages from sender to receiver\&. "
.ti -1c
.RI "int \fBacp_free_ch\fP (acp_ch_t ch)"
.br
.RI "Frees the endpoint of the channel specified by the handle\&. "
.ti -1c
.RI "acp_request_t \fBacp_nbfree_ch\fP (acp_ch_t ch)"
.br
.RI "Starts a nonblocking free of the endpoint of the channel specified by t he handle\&. "
.ti -1c
.RI "acp_request_t \fBacp_nbsend_ch\fP (acp_ch_t ch, void *buf, size_t size)"
.br
.RI "Non-Blocking send via channels\&. "
.ti -1c
.RI "acp_request_t \fBacp_nbrecv_ch\fP (acp_ch_t ch, void *buf, size_t size)"
.br
.RI "Non-Blocking receive via channels\&. "
.ti -1c
.RI "size_t \fBacp_wait_ch\fP (acp_request_t request)"
.br
.RI "Waits for the completion of the nonblocking operation\&. "
.ti -1c
.RI "int \fBacp_waitall_ch\fP (acp_request_t *, int, size_t *)"
.br
.ti -1c
.RI "\fBacp_wsd_t\fP \fBacp_create_ws\fP (size_t size)"
.br
.RI "Workspace creation\&. "
.ti -1c
.RI "int \fBacp_setparams_ws\fP (size_t proc_start, size_t size_default)"
.br
.RI "Workspace set parameters\&. "
.ti -1c
.RI "void \fBacp_destroy_ws\fP (\fBacp_wsd_t\fP WSD)"
.br
.RI "Workspace destruction\&. "
.ti -1c
.RI "int \fBacp_read_ws\fP (\fBacp_wsd_t\fP WSD, \fBacp_ga_t\fP ga, size_t size, size_t offset)"
.br
.RI "Reading workspace\&. "
.ti -1c
.RI "int \fBacp_write_ws\fP (\fBacp_wsd_t\fP WSD, const \fBacp_ga_t\fP ga, size_t size, size_t offset)"
.br
.RI "Writing workspace\&. "
.ti -1c
.RI "\fBacp_ga_t\fP \fBacp_malloc\fP (size_t size, int rank)"
.br
.RI "Global memory allocation\&. "
.ti -1c
.RI "void \fBacp_free\fP (\fBacp_ga_t\fP ga)"
.br
.RI "Deallocate the global memory\&. "
.ti -1c
.RI "void \fBacp_assign_vector\fP (\fBacp_vector_t\fP vector1, \fBacp_vector_t\fP vector2)"
.br
.RI "Vector assignment\&. "
.ti -1c
.RI "void \fBacp_assign_range_vector\fP (\fBacp_vector_t\fP vector, \fBacp_vector_it_t\fP start, \fBacp_vector_it_t\fP end)"
.br
.RI "Vector assignment with range\&. "
.ti -1c
.RI "\fBacp_ga_t\fP \fBacp_at_vector\fP (\fBacp_vector_t\fP vector, int index)"
.br
.RI "Query for a global address of any point on a vector type data\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_begin_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Query for the iterator of the head of vector data\&. "
.ti -1c
.RI "size_t \fBacp_capacity_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Capacity of vector\&. "
.ti -1c
.RI "void \fBacp_clear_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Vector elimination\&. "
.ti -1c
.RI "\fBacp_vector_t\fP \fBacp_create_vector\fP (size_t size, int rank)"
.br
.RI "Vector creation\&. "
.ti -1c
.RI "void \fBacp_destroy_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Vector destruction\&. "
.ti -1c
.RI "int \fBacp_empty_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Query for vector empty\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_end_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Query for the iterator of just behind of the end of vector data\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_erase_vector\fP (\fBacp_vector_it_t\fP it, size_t size)"
.br
.RI "Deletion of the vector data\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_erase_range_vector\fP (\fBacp_vector_it_t\fP start, \fBacp_vector_it_t\fP end)"
.br
.RI "Deletion of the vector data from 'start' to 'end'\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_insert_vector\fP (\fBacp_vector_it_t\fP it, const \fBacp_ga_t\fP ga, size_t size)"
.br
.RI "Insertion of the vector data\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_insert_range_vector\fP (\fBacp_vector_it_t\fP it, \fBacp_vector_it_t\fP start, \fBacp_vector_it_t\fP end)"
.br
.RI "Insertion of the vector data from 'start' to 'end'\&. "
.ti -1c
.RI "void \fBacp_pop_back_vector\fP (\fBacp_vector_t\fP vector, size_t size)"
.br
.RI "Data deletion at the end of the vector data\&. "
.ti -1c
.RI "void \fBacp_push_back_vector\fP (\fBacp_vector_t\fP vector, const \fBacp_ga_t\fP ga, size_t size)"
.br
.RI "Data addition at the end of the vector data\&. "
.ti -1c
.RI "void \fBacp_reserve_vector\fP (\fBacp_vector_t\fP vector, size_t size)"
.br
.RI "Reservation of a region in the vector type data\&. "
.ti -1c
.RI "size_t \fBacp_size_vector\fP (\fBacp_vector_t\fP vector)"
.br
.RI "Query of the data size in the vector\&. "
.ti -1c
.RI "void \fBacp_swap_vector\fP (\fBacp_vector_t\fP vector1, \fBacp_vector_t\fP vector2)"
.br
.RI "Vector swap\&. "
.ti -1c
.RI "\fBacp_vector_it_t\fP \fBacp_advance_vector_it\fP (\fBacp_vector_it_t\fP it, int n)"
.br
.RI "Advancement of an iterator for vector type data\&. "
.ti -1c
.RI "\fBacp_ga_t\fP \fBacp_dereference_vector_it\fP (\fBacp_vector_it_t\fP it)"
.br
.RI "Query of the global address of a reference of vector tyep iterator\&. "
.ti -1c
.RI "int \fBacp_distance_vector_it\fP (\fBacp_vector_it_t\fP first, \fBacp_vector_it_t\fP last)"
.br
.RI "Query of the distance of two iterators of vector type data between 'first' and 'last'\&. "
.ti -1c
.RI "void \fBacp_assign_deque\fP (\fBacp_deque_t\fP deque1, \fBacp_deque_t\fP deque2)"
.br
.RI "Deque assignment\&. "
.ti -1c
.RI "void \fBacp_assign_range_deque\fP (\fBacp_deque_t\fP deque, \fBacp_deque_it_t\fP start, \fBacp_deque_it_t\fP end)"
.br
.RI "Deque assignment with range\&. "
.ti -1c
.RI "\fBacp_ga_t\fP \fBacp_at_deque\fP (\fBacp_deque_t\fP deque, int index)"
.br
.RI "Query for a global address of any point on a deque type data\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_begin_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Query for the iterator of the head of deque data\&. "
.ti -1c
.RI "size_t \fBacp_capacity_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Capacity of deque\&. "
.ti -1c
.RI "void \fBacp_clear_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Deque elimination\&. "
.ti -1c
.RI "\fBacp_deque_t\fP \fBacp_create_deque\fP (size_t size, int rank)"
.br
.RI "Deque creation\&. "
.ti -1c
.RI "void \fBacp_destroy_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Deque destruction\&. "
.ti -1c
.RI "int \fBacp_empty_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Query for deque empty\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_end_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Query for the iterator of just behind of the end of deque data\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_erase_deque\fP (\fBacp_deque_it_t\fP it, size_t size)"
.br
.RI "Deletion of the deque data\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_erase_range_deque\fP (\fBacp_deque_it_t\fP start, \fBacp_deque_it_t\fP end)"
.br
.RI "Deletion of the deque data from 'start' to 'end'\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_insert_deque\fP (\fBacp_deque_it_t\fP it, const \fBacp_ga_t\fP ga, size_t size)"
.br
.RI "Insertion of the deque data\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_insert_range_deque\fP (\fBacp_deque_it_t\fP it, \fBacp_deque_it_t\fP start, \fBacp_deque_it_t\fP end)"
.br
.RI "Insertion of the deque data from 'start' to 'end'\&. "
.ti -1c
.RI "void \fBacp_pop_back_deque\fP (\fBacp_deque_t\fP deque, size_t size)"
.br
.RI "Data deletion at the end of the deque data\&. "
.ti -1c
.RI "void \fBacp_pop_front_deque\fP (\fBacp_deque_t\fP deque, size_t size)"
.br
.RI "Data deletion at the head of the deque data\&. "
.ti -1c
.RI "void \fBacp_push_back_deque\fP (\fBacp_deque_t\fP deque, const \fBacp_ga_t\fP ga, size_t size)"
.br
.RI "Data addition at the end of the deque data\&. "
.ti -1c
.RI "void \fBacp_push_front_deque\fP (\fBacp_deque_t\fP deque, const \fBacp_ga_t\fP ga, size_t size)"
.br
.RI "Data addition at the end of the deque data\&. "
.ti -1c
.RI "void \fBacp_reserve_deque\fP (\fBacp_deque_t\fP deque, size_t size)"
.br
.RI "Reservation of a region in the deque type data\&. "
.ti -1c
.RI "size_t \fBacp_size_deque\fP (\fBacp_deque_t\fP deque)"
.br
.RI "Query of the data size in the deque\&. "
.ti -1c
.RI "void \fBacp_swap_deque\fP (\fBacp_deque_t\fP deque1, \fBacp_deque_t\fP deque2)"
.br
.RI "Deque swap\&. "
.ti -1c
.RI "\fBacp_deque_it_t\fP \fBacp_advance_deque_it\fP (\fBacp_deque_it_t\fP it, int n)"
.br
.RI "Advancement of an iterator for deque type data\&. "
.ti -1c
.RI "\fBacp_pair_t\fP \fBacp_dereference_deque_it\fP (\fBacp_deque_it_t\fP it, size_t size)"
.br
.RI "Query of the global address of a reference of deque tyep iterator\&. "
.ti -1c
.RI "int \fBacp_distance_deque_it\fP (\fBacp_deque_it_t\fP first, \fBacp_deque_it_t\fP last)"
.br
.RI "Query of the distance of two iterators of deque type data between 'first' and 'last'\&. "
.ti -1c
.RI "void \fBacp_assign_list\fP (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2)"
.br
.RI "List type data assignment\&. "
.ti -1c
.RI "void \fBacp_assign_range_list\fP (\fBacp_list_t\fP list, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "List assignment with range\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_begin_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Query for the head iterator of a list\&. "
.ti -1c
.RI "void \fBacp_clear_list\fP (\fBacp_list_t\fP list)"
.br
.RI "List elimination\&. "
.ti -1c
.RI "\fBacp_list_t\fP \fBacp_create_list\fP (int rank)"
.br
.RI "List creation\&. "
.ti -1c
.RI "void \fBacp_destroy_list\fP (\fBacp_list_t\fP list)"
.br
.RI "List destruction\&. "
.ti -1c
.RI "int \fBacp_empty_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Query for list empty\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_end_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Query for the tail iterator of a list\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_erase_list\fP (\fBacp_list_it_t\fP it)"
.br
.RI "Erase a list element\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_erase_range_list\fP (\fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "Deletion of the list data from 'start' to 'end'\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_insert_list\fP (\fBacp_list_it_t\fP it, const \fBacp_element_t\fP elem, int rank)"
.br
.RI "Insert a list element\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_insert_range_list\fP (\fBacp_list_it_t\fP it, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "Insertion of the list data from 'start' to 'end'\&. "
.ti -1c
.RI "void \fBacp_merge_list\fP (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2, int(*comp)(const \fBacp_element_t\fP elem1, const \fBacp_element_t\fP elem2))"
.br
.RI "List type data merge\&. "
.ti -1c
.RI "void \fBacp_pop_back_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Data deletion at the end of the list data\&. "
.ti -1c
.RI "void \fBacp_pop_front_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Data deletion at the head of the list data\&. "
.ti -1c
.RI "void \fBacp_push_back_list\fP (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem, int rank)"
.br
.RI "Inserts a list element at the tail of the list\&. "
.ti -1c
.RI "void \fBacp_push_front_list\fP (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem, int rank)"
.br
.RI "Insert a list element at the head of the list\&. "
.ti -1c
.RI "void \fBacp_remove_list\fP (\fBacp_list_t\fP list, const \fBacp_element_t\fP elem)"
.br
.RI "Erase a list\&. "
.ti -1c
.RI "void \fBacp_reverse_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Reconnect elements of a list in reverse sequence\&. "
.ti -1c
.RI "size_t \fBacp_size_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Query of the data size in the list\&. "
.ti -1c
.RI "void \fBacp_sort_list\fP (\fBacp_list_t\fP list, int(*comp)(const \fBacp_element_t\fP elem1, const \fBacp_element_t\fP elem2))"
.br
.RI "Sorting List type data\&. "
.ti -1c
.RI "void \fBacp_splice_list\fP (\fBacp_list_it_t\fP it1, \fBacp_list_it_t\fP it2)"
.br
.RI "Splice list type data\&. "
.ti -1c
.RI "void \fBacp_splice_range_list\fP (\fBacp_list_it_t\fP it, \fBacp_list_it_t\fP start, \fBacp_list_it_t\fP end)"
.br
.RI "Spilice list with range\&. "
.ti -1c
.RI "void \fBacp_swap_list\fP (\fBacp_list_t\fP list1, \fBacp_list_t\fP list2)"
.br
.RI "Swap list type data\&. "
.ti -1c
.RI "void \fBacp_unique_list\fP (\fBacp_list_t\fP list)"
.br
.RI "Unique list type data\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_advance_list_it\fP (\fBacp_list_it_t\fP it, int n)"
.br
.RI "Advancement of an iterator for list type data\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_decrement_list_it\fP (\fBacp_list_it_t\fP it)"
.br
.RI "Decrement an iterater of a list data\&. "
.ti -1c
.RI "\fBacp_element_t\fP \fBacp_dereference_list_it\fP (\fBacp_list_it_t\fP it)"
.br
.RI "Query of the global address of a reference of list tyep iterator\&. "
.ti -1c
.RI "int \fBacp_distance_list_it\fP (\fBacp_list_it_t\fP first, \fBacp_list_it_t\fP last)"
.br
.RI "Query of the distance of two iterators of list type data between 'first' and 'last'\&. "
.ti -1c
.RI "\fBacp_list_it_t\fP \fBacp_increment_list_it\fP (\fBacp_list_it_t\fP it)"
.br
.RI "Increment an iterater of a list data\&. "
.ti -1c
.RI "void \fBacp_assign_local_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Set type data assignment\&. "
.ti -1c
.RI "void \fBacp_assign_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Set type data assignment\&. "
.ti -1c
.RI "\fBacp_set_it_t\fP \fBacp_begin_local_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query for the local head iterator of a set\&. "
.ti -1c
.RI "\fBacp_set_it_t\fP \fBacp_begin_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query for the head iterator of a set\&. "
.ti -1c
.RI "void \fBacp_clear_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Set elimination\&. "
.ti -1c
.RI "\fBacp_set_t\fP \fBacp_create_set\fP (int num_ranks, const int *ranks, int num_slots, int rank)"
.br
.RI "Set creation\&. "
.ti -1c
.RI "void \fBacp_destroy_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Set destruction\&. "
.ti -1c
.RI "int \fBacp_empty_local_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query for local set empty\&. "
.ti -1c
.RI "int \fBacp_empty_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query for set empty\&. "
.ti -1c
.RI "\fBacp_set_it_t\fP \fBacp_end_local_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query for the tail iterator of a set\&. "
.ti -1c
.RI "\fBacp_set_it_t\fP \fBacp_end_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query for the tail iterator of a set\&. "
.ti -1c
.RI "\fBacp_set_it_t\fP \fBacp_find_set\fP (\fBacp_set_t\fP set, \fBacp_element_t\fP key)"
.br
.RI "Search for the key in set that matches with key\&. "
.ti -1c
.RI "int \fBacp_insert_set\fP (\fBacp_set_t\fP set, \fBacp_element_t\fP key)"
.br
.RI "Insert a set element\&. "
.ti -1c
.RI "void \fBacp_merge_local_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Merge the local keys\&. "
.ti -1c
.RI "void \fBacp_merge_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Merge the keys\&. "
.ti -1c
.RI "void \fBacp_move_local_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Move the local keys\&. "
.ti -1c
.RI "void \fBacp_move_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Move the keys\&. "
.ti -1c
.RI "void \fBacp_remove_set\fP (\fBacp_set_t\fP set, \fBacp_element_t\fP key)"
.br
.RI "Erase a set element\&. "
.ti -1c
.RI "size_t \fBacp_size_local_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query of the number ot local keys in the set\&. "
.ti -1c
.RI "size_t \fBacp_size_set\fP (\fBacp_set_t\fP set)"
.br
.RI "Query of the data size in the set\&. "
.ti -1c
.RI "void \fBacp_swap_set\fP (\fBacp_set_t\fP set1, \fBacp_set_t\fP set2)"
.br
.RI "Swap set type data\&. "
.ti -1c
.RI "\fBacp_element_t\fP \fBacp_dereference_set_it\fP (\fBacp_set_it_t\fP it)"
.br
.RI "Query of the global address of a reference of set tyep iterator\&. "
.ti -1c
.RI "\fBacp_set_it_t\fP \fBacp_increment_set_it\fP (\fBacp_set_it_t\fP it)"
.br
.RI "Increment an iterater of a set data\&. "
.ti -1c
.RI "void \fBacp_assign_local_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "Map local assignment\&. "
.ti -1c
.RI "void \fBacp_assign_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "Map assignment\&. "
.ti -1c
.RI "\fBacp_map_it_t\fP \fBacp_begin_local_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Query for the local iterator of the head of map data\&. "
.ti -1c
.RI "\fBacp_map_it_t\fP \fBacp_begin_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Query for the iterator of the head of map data\&. "
.ti -1c
.RI "void \fBacp_clear_local_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Delete elements of lists in a map type data\&. "
.ti -1c
.RI "void \fBacp_clear_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Delete elements of lists in a map type data\&. "
.ti -1c
.RI "\fBacp_map_t\fP \fBacp_create_map\fP (int num_ranks, const int *ranks, int num_slots, int rank)"
.br
.RI "Map creation\&. "
.ti -1c
.RI "void \fBacp_destroy_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Map destruction\&. "
.ti -1c
.RI "int \fBacp_empty_local_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Query for the local map is empty or not\&. "
.ti -1c
.RI "int \fBacp_empty_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Query for the map is empty or not\&. "
.ti -1c
.RI "\fBacp_map_it_t\fP \fBacp_end_local_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Loacl map end iterator\&. "
.ti -1c
.RI "\fBacp_map_it_t\fP \fBacp_end_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Map end iterator\&. "
.ti -1c
.RI "\fBacp_map_it_t\fP \fBacp_find_map\fP (\fBacp_map_t\fP map, \fBacp_element_t\fP key)"
.br
.RI "Map finding\&. "
.ti -1c
.RI "int \fBacp_insert_map\fP (\fBacp_map_t\fP map, \fBacp_pair_t\fP pair)"
.br
.RI "Map creation\&. "
.ti -1c
.RI "void \fBacp_merge_local_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "map type data local merge "
.ti -1c
.RI "void \fBacp_merge_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "map type data merge "
.ti -1c
.RI "void \fBacp_move_local_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "Move the local keys\&. "
.ti -1c
.RI "void \fBacp_move_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "Move the keys\&. "
.ti -1c
.RI "void \fBacp_remove_map\fP (\fBacp_map_t\fP map, \fBacp_element_t\fP key)"
.br
.RI "Erase the key of map\&. "
.ti -1c
.RI "size_t \fBacp_retrieve_map\fP (\fBacp_map_t\fP map, \fBacp_pair_t\fP pair)"
.br
.RI "Retrieve the map\&. "
.ti -1c
.RI "size_t \fBacp_size_local_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Query of the number ot local keys in the map\&. "
.ti -1c
.RI "size_t \fBacp_size_map\fP (\fBacp_map_t\fP map)"
.br
.RI "Query for the number of elements of map\&. "
.ti -1c
.RI "void \fBacp_swap_map\fP (\fBacp_map_t\fP map1, \fBacp_map_t\fP map2)"
.br
.RI "Swap map type data\&. "
.ti -1c
.RI "\fBacp_pair_t\fP \fBacp_dereference_map_it\fP (\fBacp_map_it_t\fP it)"
.br
.RI "Query for the element referenced by 'it'\&. "
.ti -1c
.RI "\fBacp_map_it_t\fP \fBacp_increment_map_it\fP (\fBacp_map_it_t\fP it)"
.br
.RI "Increment an iterater of a map data\&. "
.in -1c
.SH "Detailed Description"
.PP 
A header file for ACP\&. 

This is the ACP header file\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ACP Library from the source code\&.
